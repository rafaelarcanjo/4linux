---
- hosts: all
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: true
  tasks:
    - name: Instala pacotes base
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - git
        - apt-transport-https
        - software-properties-common
        - gnupg2
      when: ansible_facts.virtualization_type == 'virtualbox'

    - name: Adiciona key do repositÃ³rio
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
      when: ansible_facts.virtualization_type == 'virtualbox'

    - name: Adiciona repositorio oficial do Docker
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/debian stretch stable
        state: present
      when: ansible_facts.virtualization_type == 'virtualbox'
        
    - name: Instala Docker
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - docker-ce
        - docker-compose
      when: ansible_facts.virtualization_type == 'virtualbox'
  
    - name: Adiciona o usuario vagrant no grupo docker
      user:
        name: vagrant
        group: docker
      when: ansible_facts.virtualization_type == 'virtualbox'

    - name: Git checkout
      git:
        repo: https://{{ GITHUB_TOKEN }}@github.com/rafaelarcanjo/4linux.git
        dest: /opt/4linux
        force: yes

    - name: Corringindo a senha do Grafana
      replace:
        path: '/opt/4linux/provision/grafana/docker-compose.yaml'
        regexp: 'GF_SECURITY_ADMIN_PASSWORD=GF_SECURITY_ADMIN_PASSWORD'
        replace: "GF_SECURITY_ADMIN_PASSWORD={{ GRAFANA_PASS }}"
      when: ansible_facts.hostname == 'server'

    - name: Corringindo a senha do MySQL
      replace:
        path: '/opt/4linux/provision/monitoring/docker-compose.yaml'
        regexp: 'MYSQL_ROOT_PASSWORD'
        replace: "{{ MYSQL_ROOT_PASSWORD }}"
      when: ansible_facts.hostname == 'client'

    - name: Corrigindo a senha do Prometheus
      shell: |
        docker run --rm -t httpd:alpine sh -c 'echo -n {{ veeLeeDeishi4die8Vei }} | htpasswd -in admin' > /opt/4linux/provision/monitoring/.htpasswd
      when: ansible_facts.hostname == 'client'

    - name: Executa o docker-compose da 4Linux, somente no ambiente local
      shell: |
        cd /opt/4linux/app-devops/ && docker-compose up -d
      when: ansible_facts.eth1.ipv4.address == '192.168.63.254'

    - name: CLIENT | Executa o Docker Compose
      shell: |
        cd /opt/4linux/provision/monitoring/ && docker-compose up -d
      when: ansible_facts.hostname == 'client'

    - name: SERVER | Executa o Docker Compose
      shell: |
        cd /opt/4linux/provision/grafana/ && docker-compose up -d        
      when: ansible_facts.hostname == 'server'

    - name: SERVER | Aguardando o Grafana
      uri:
        url: 'http://localhost:3000/login'
        status_code: 200
      register: result
      until: result.status == 200
      retries: 60
      delay: 1
      when: ansible_facts.hostname == 'server'

    - name: SERVER | Adicionando o Prometheus 
      grafana_datasource:
        name: DS_PROMETHEUS
        grafana_url: http://localhost:3000
        grafana_user: admin
        grafana_password: "{{ GRAFANA_PASS }}"
        basic_auth_user: admin
        basic_auth_password: "{{ veeLeeDeishi4die8Vei }}"
        ds_type: prometheus
        url: http://192.168.63.254:9090/
      when: ansible_facts.hostname == 'server'

    - name: SERVER | Baixando os dashboards
      uri:
        url: "{{ item.url }}"
        dest: "/tmp/{{ item.dashboard }}"
      loop:
        - { url: 'https://grafana.com/api/dashboards/193/revisions/1/download', dashboard: '193.json' }
        - { url: 'https://grafana.com/api/dashboards/8564/revisions/10/download', dashboard: '8564.json' }
        - { url: 'https://grafana.com/api/dashboards/10180/revisions/1/download', dashboard: '10180.json' }
        - { url: 'https://grafana.com/api/dashboards/12708/revisions/1/download', dashboard: '12708.json' }
        - { url: 'https://grafana.com/api/dashboards/10991/revisions/11/download', dashboard: '10991.json' }
      when: ansible_facts.hostname == 'server'

    - name: SERVER | Corringindo os datasources       
      replace:
        path: "{{ item }}"
        regexp: '"(?:\${)?DS_[A-Z0-9_-]+(?:})?"'
        replace: '"DS_PROMETHEUS"'
      with_fileglob:
        - "/tmp/*.json"
      when: ansible_facts.hostname == 'server'

    - name: SERVER | Importando os dashboards
      uri:
        url: "http://localhost:3000/api/dashboards/db"
        user: 'admin'
        password: "{{ GRAFANA_PASS }}"
        force_basic_auth: true
        method: POST
        body_format: json
        body: >
          {
            "dashboard": {{ lookup("file", item) }},
            "overwrite": true,
            "message": "Updated by ansible"
          }
      no_log: true
      with_fileglob:
        - '/tmp/*.json'
      when: ansible_facts.hostname == 'server'